C
C******************************************************************************
C 
C CONTROL AND DATA INPUT MODULES
C 
C******************************************************************************
C 
      PROGRAM MINIFEN
C.... SET PROGRAM CAPACITY * MAX MUST AGREE WITH DIMENSION OF M
      COMMON M(2000)
      COMMON/PSIZE/ MAX
      MAX = 2000
      CALL PCONTR
      STOP
      END
C
      SUBROUTINE PCONTR
C
C.... FINITE ELEMENT ANALYSIS PROGRAM (FEAP) FOR SOLUTION OF GENERAL
C.... PROBLEM CLASSES USING THE FINITE ELEMENT METHOD. PROBLEM SIZE
C.... IS CONTROLLED BY THE DIMENSION OF BLANK COMMON AND VALUE OF MAX
C.... AS SET IN MAIN PROGRAM.  ALL ARRAYS MUST RESIDE IN CENTRAL MEMORY
C
C.... PROGRAMMED BY PROF. R.L. TAYLOR, DEPARTMENT OF CIVIL ENGINEERING,
C.... UNIVERSITY OF CALIFORNIA, BERKELEY, CALIFORNIA 94720, U.S.A
C
      LOGICAL PCOMP
      COMMON/CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      COMMON/LABEL/ PDIS(6),A(6),BC(2),DI(6),CD(3),TE(3),FD(3)     
      COMMON M(1)
      DIMENSION TITL(20),WD(3)
      DATA WD/4HFEAP,4HMACR,4HSTOP/
C.... READ A CARD AND COMPARE FIRST 4 COLUMNS WITH MACRO LIST 
1     READ(5,1000) TITL 
      IF(PCOMP(TITL(1),WD(1))) GO TO 100 
      IF(PCOMP(TITL(1),WD(2))) GO TO 200 
      IF(PCOMP(TITL(1),WD(3))) RETURN
      GO TO 1
C.... READ AND PRINT CONTROL INFORMATION
100   DO 101 I = 1,20
101   HEAD(I) = TITL(I)
      READ(5,1001) NUMNP,NUMEL,NUMMAT,NDM,NDF,NEN,NAD
      WRITE(6,2000) HEAD,NUMNP,NUMEL,NUMMAT,NDM,NDF,NEN,NAD
C.... SET POINTERS FOR ALLOCATION OF DATA ARRAYS
      PDIS(2) = A(NDM)
      NEN1 = NEN + 1
      NST = NEN*NDF + NAD
      N0 = 1 + NST*2*IPR
      N1 = N0 + NEN*NDM*IPR
      N2 = N1 + NEN*IPR
      N3 = N2 + NST
      N4 = N3 + NST*IPR
      N5 = N4 + NST*NST*IPR
      N6 = N5 + NUMMAT
      N7 = N6 + 10*NUMMAT*IPR
      N8 = N7 + NDF*NUMNP
      N9 = N8 + NDM*NUMNP*IPR
      N10 = N9 + NEN1*NUMEL
      N11 = N10 + NDF*NUMNP*IPR
      N12 = N11 + NUMNP*IPR
      N13 = N12 + NDF*NUMNP
C.... CHECK THAT SUFFICIENT MEMORY EXISTS
      CALL SETMEM(N13)
      CALL PZERO(M,N12)
C.... CALL MESH INPUT SUBROUTINE TO READ AND PRINT ALL MESH DATA
      III = 0
      CALL PMESH(M(N2),M(N5),M(N6),M(N7),M(N8),M(N9),M(N10),M(N11),NDF,
     1   NDM,NEN1,III)
C.... ESTABLISH PROFILE OF RESULTING EQUATIONS FOR STIFFNESS, MASS, ETC 
      CALL PROFIL(M(N12),M(N7),M(N9),NDF,NEN1,NAD)
C.... SET POINTERS FOR SOLUTION ARRAYS * CHECK FOR SUFFICIENT MEMORY 
      N13 = N12 + NEQ 
      N14 = N13 + NEQ*IPR
      NE  = N14 + NUMNP*NDF*IPR
      CALL SETMEM(NE)
      CALL PZERO(M(N13),NEQ)
      GO TO 1
C.... CALL MACRO SOLUTION MODULE FOR ESTABLISHING SOLUTION ALGORITHM 
200   CALL PMACR(M,M(N0),M(N1),M(N2),M(N3),M(N4),M(N5),M(N6),M(N7),M(N8)
     1   ,M(N9),M(N10),M(N11),M(N12),M(N13),M(N14),M(NE),NDF,NDM,NEN1,
     2    NST,NE)
      GO TO 1
C.... INPUT/OUTPUT FORMATS 
1000  FORMAT(20A4) 
1001  FORMAT(16I5) 
2000  FORMAT(1H1,20A4//5X,30HNUMBER OF NODAL POINTS       =,I6/5X,30HNUM
     1BER OF ELEMENTS           =,I6/5X,30HNUMBER OF MATERIAL SETS
     2=,I6/5X,30HDIMENSION OF COORDINATE SPACE=,I6/5X,30HDEGREE OF FREED
     3OMS/NODE      =,I6/5X,30HNODES PER ELEMENT (MAXIMUM)  =,I6/5X,30HE
     4XTRA D.O.F. TO ELEMENT      =,I6)
      END
C
      BLOCK DATA
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      COMMON /LABEL/ PDIS(6),A(6),BC(2),DI(6),CD(3),TE(3),FD(3)
      DATA A/2H,1,2H,2,2H,3,2H,4,2H,5,2H,6/,CD/4H COO,4HRDIN,4HATES/
      DATA TE/4H TEM,4HPERA,4HTURE/,FD/4H FOR,4HCE/D,4HISPL/
      DATA PDIS/4H(I10,2H, ,4HF13.,4H4,  ,4H6E13,4H.4) /
      DATA BC/4H B.C,2H. /,DI/4H DIS,2HPL,4H VEL,2HOC,4H ACC,2HEL/
      DATA O/1H0/,IPR/2/
      END
C
      SUBROUTINE GENVEC(NDM,X,CD,PRT,ERR)
C 
C.... GENERATE REAL DATA ARRAYS BY LINEAR INTERPOLATION 
C 
      LOGICAL PRT,ERR,PCOMP 
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      DIMENSION X(NDM,1),XL(7),CD(2)
      DATA BL/4HBLAN/
      N = 0
      NG = 0
102   L = N
      LG = NG
      READ(5,1000) N,NG,XL
      IF(N.LE.0.OR.N.GT.NUMNP) GO TO 108
      DO 103 I = 1,NDM
103   X(I,N) = XL(I)
      IF(LG) 104,102,104
104   LG = ISIGN(LG,N-L)
      LI =(IABS(N-L+LG)-1)/IABS(LG)
      DO 105 I = 1,NDM
105   XL(I) = (X(I,N)-X(I,L))/LI 
106   L = L + LG 
      IF((N-L)*LG.LE.0) GO TO 102 
      IF(L.LE.0.OR.L.GT.NUMNP) GO TO 110
      DO 107 I = 1,NDM
107   X(I,L) = X(I,L-LG) + XL(I) 
      GO TO 106 
110   WRITE(6,3000) L,(CD(I),I=1,3) 
      ERR = .TRUE. 
      GO TO 102
108   DO 109 I = 1,NUMNP,50 
      IF(PRT) WRITE(6,2000) O,HEAD,(CD(L),L=1,3),(L,CD(1),CD(2),L=1,NDM)
      N = MIN0(NUMNP,I+49)
      DO 109 J = I,N
      IF(PCOMP(X(1,J),BL).AND.PRT) WRITE(6,2008) J
109   IF(.NOT.PCOMP(X(1,J),BL).AND.PRT) WRITE(6,2009) J,(X(L,J),L=1,NDM) 
      RETURN 
1000  FORMAT(2I5,7F10.0) 
2000  FORMAT(A1,20A4//5X, 5HNODAL,3A4//6X,4HNODE,9(I7,A4,A2)) 
2008  FORMAT(I10,32H HAS NOT BEEN INPUT OR GENERATED)
2009  FORMAT(I10,9F13.4) 
3000  FORMAT(5X,43H**FATAL ERROR 02** ATTEMPT TO GENERATE NODE,I5,3H IN 
     1  ,3A4) 
      END
C
      SUBROUTINE PMESH(IDL,IE,D,ID,X,IX,F,T,NDF,NDM,NEN1,III)
C 
C.... DATA INPUT ROUTINE FOR MESH DESCRIPTION 
C 
      LOGICAL PRT,ERR,PCOMP 
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      COMMON /ELDATA/ DM,N,MA,MCT,IEL,NEL
      COMMON /LABEL/ PDIS(6),A(6),BC(2),DI(6),CD(3),TE(3),FD(3)
      DIMENSION IE(1),D(10,1),ID(NDF,1),X(NDM,1),IX(NEN1,1),XHED(7)
     1  ,IDL(6),XL(3),F(NDF,1),FL(6),T(1),WD(10),VA(2)
      DATA WD/4HCOOR,4HELEM,4HMATE,4HBOUN,4HFORC,4HTEMP,4HEND ,4HPRIN,
     1  4HNOPR,4HPAGE/,BL/4HBLAN/,VA/4H VAL,2HUE/,LIST/10/,PRT/.TRUE./
C.... INITIALISE ARRAYS 
      ERR = .FALSE. 
      IF(III.LT.0) GO TO 10
      DO 101 N = 1,NUMNP
      DO 99 I = 1,NDM
99    X(I,N) = BL
      DO 100 I = 1,NDF
      ID(I,N) = 0
100   F(I,N) = 0.0 
101   T(N) = 0.0 
10    READ(5,1000)CC 
      DO 20 I = 1,LIST 
20    IF(PCOMP(CC,WD(I))) GO TO 30 
      GO TO 10
30    GO TO (1,2,3,4,5,6,7,8,9,11),I 
C.... NODAL COORDINATE DATA INPUT 
1     CALL GENVEC(NDM,X,CD,PRT,ERR) 
      GO TO 10 
C.... ELEMENT DATA INPUT 
2     L = 0 
      DO 206 I = 1,NUMEL,50 
      IF(PRT) WRITE(6,2001) O,HEAD,(K,K=1,NEN)
      J = MIN0(NUMEL,I+49)
      DO 206 N = I,J
      IF(L-N) 200,202,203
200   READ(5,1001) L,LK,(IDL(K),K=1,NEN),LX 
      IF(L.EQ.0) L = NUMEL+1 
      IF(LX.EQ.0) LX=1
      IF(L-N) 201,202,203
201   WRITE(6,3001) L,N 
      ERR = .TRUE. 
      GO TO 206
202   NX = LX 
      DO 207 K = 1,NEN 
207   IX(K,L) = IDL(K) 
      IX(NEN1,L) = LK 
      GO TO 205
203   IX(NEN1,N) = IX(NEN1,N-1) 
      DO 204 K = 1,NEN 
      IX(K,N) = IX(K,N-1) + NX
204   IF(IX(K,N-1).EQ.0) IX(K,N) = 0 
205   IF(PRT) WRITE(6,2002) N,IX(NEN1,N),(IX(K,N),K=1,NEN) 
206   CONTINUE 
      GO TO 10 
C.... MATERIAL DATA INPUT 
3     WRITE(6,2004) O,HEAD 
      DO 300 N = 1,NUMMAT 
      READ(5,1002) MA,IEL,XHED
      WRITE(6,2003)MA,IEL,XHED
      IE(MA) = IEL
300   CALL ELMLIB(D(1,MA),DUM,X,IX(1,1),T,S,P,NDF,NDM,NST,1)
      GO TO 10 
C.... READ IN THE RESTRAINT CONDITIONS FOR EACH NODE 
4     IF(PRT) WRITE(6,2000) O,HEAD,(I,BC,I=1,NDF) 
      III = 1 
      N = 0
      NG = 0
402   L = N 
      LG = NG 
      READ(5,1001) N,NG,IDL
      IF (N.LE.0.OR.N.GT.NUMNP) GO TO 60
      DO 51 I = 1,NDF
      ID(I,N) = IDL(I)
51    IF(L.NE.0.AND.IDL(I).EQ.0.AND.ID(I,L).LT.0) ID(I,N) = -1
      LG = ISIGN(LG,N-L)
52    L = L + LG
      IF((N-L)*LG.LE.0) GO TO 402
      DO 53 I = 1,NDF
53    IF(ID(I,L-LG).LT.0) ID(I,L) = -1
      GO TO 52
60    DO 58 N = 1,NUMNP
      DO 56 I = 1,NDF
56    IF(ID(I,N).NE.0) GO TO 57
      GO TO 58
57    IF(PRT) WRITE(6,2007) N,(ID(I,N),I=1,NDF)
58    CONTINUE
      GO TO 10
C.... FORCE/DISPL DATA INPUT
5     CALL GENVEC(NDF,F,FD,PRT,ERR)
      GO TO 10
C.... TEMPERATURE DATA INPUT
6     CALL GENVEC(1,T,TE,PRT,ERR)
      GO TO 10
7     IF(ERR) STOP
      RETURN
8     PRT = .TRUE.
      GO TO 10
9     PRT = .FALSE.
      GO TO 10
11    READ(5,1000) O
      GO TO 10
1000  FORMAT(A4,75X,A1)
1001  FORMAT(16I5)
1002  FORMAT(I5,4X,I1,17A4)
2000  FORMAT(A1,20A4//5X,17HNODAL B.C.       //6X,4HNODE,9(I7,A4,A2)/1X)
2001  FORMAT(A1,20A4//5X,8HELEMENTS//3X,7HELEMENT,2X,8HMATERIAL,
     1   14(I3,5H NODE)/(20X,14(I3,5H NODE)))
2002  FORMAT(2I10,14I8/(20X,14I8))
2003  FORMAT(/5X,12HMATERIAL SET,I3,17H FOR ELEMENT TYPE,I2,5X,17A4/1X)
2004  FORMAT(A1,20A4//5X,19HMATERIAL PROPERTIES)
2005  FORMAT(A1,20A4//5X,17HNODAL FORCE/DISPL//6X,4HNODE,9(I7,A4,A2))
2006  FORMAT(I10,9E13.3)
2007  FORMAT(I10,9I13)
3001  FORMAT(5X,20H**ERROR 03** ELEMENT,I5,22H APPEARS AFTER ELEMENT,I5)
      END
C
      SUBROUTINE SETMEM(J)
C 
C.... MONITOR AVAILABLE MEMORY IN BLANK COMMON 
C 
      COMMON M(1) 
      COMMON /PSIZE/ MAX
      K = J
      IF(K.LE.MAX) RETURN
      WRITE(6,1000) K,MAX
      STOP
1000  FORMAT(5X,49H**ERROR 01** INSUFFICIENT STORAGE IN BLANK COMMON/ 
     1   17X,11HREQUIRED  =,I8/17X,11HAVAILABLE =,I8/) 
      END
C 
C******************************************************************************
C 
C SOLUTION AND OUTPUT MODULES
C 
C******************************************************************************
C 
      SUBROUTINE PMACR (UL,XL,TL,LD,P,S,IE,D,ID,X,IX,F,T,JDIAG,B,DR,CT
     1,NDF,NDM,NEN1,NST,NEND)
C 
C.... MACRO INSTRUCTION SUBPROGRAM 
C 
C.... CONTROLS PROBLEM SOLUTION AND OUTPUT ALGORITHMS BY 
C.... ORDER OF SPECIFYING MACRO COMMANDS IN ARRAY WD. 
C 
      LOGICAL AFR,BFR,CFR,AFL,BFL,CFL,DFL,EFL,FFL,GFL,PCOMP 
      COMMON M(1)
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      COMMON /LABEL/ PDIS(6),Z(6),BC(2),DI(6),CD(3),TE(3),FD(3)     
      COMMON /PRLOD/ PROP
      COMMON /TDATA/ TIME,DT,C1,C2,C3,C4,C5
      DIMENSION WD(21),CT(4,1),CTL(4),LVS(9),LVE(9),JDIAG(1),
     1   UL(1),XL(1),TL(1),LD(1),P(1),S(1),IE(1),D(1),ID(1),X(1),
     2   IX(1),F(1),T(1),B(1),DR(1)
      DATA WD/4HTOL ,4HDT  ,4HSTRE,4HDISP,4HTANG,4HFORM,4HLOOP,4HNEXT,
     1        4HPROP,4HDATA,4HTIME,4HCONV,4HSOLV,4HLMAS,4HCMAS,4HMESH,
     2        4HEIGE,4HEXCD,4HUTAN,4HREAC,4HCHEC/
      DATA NWD/21/,ENDM/4HEND /,NV,NC/1,1/
C.... SET INITIAL VALUES OF PARAMETERS
      DT = 0.0
      PROP = 1.0
      RNMAX = 0.0
      TIME = 0.0
      TOL = 1.E-9
      UN = 0.0
      AFL = .TRUE.
      AFR = .FALSE.
      BFL = .TRUE.
      BFR = .FALSE.
      CFL = .TRUE.
      CFR = .FALSE.
      DFL = .TRUE.
      EFL = .TRUE.
      FFL = .FALSE.
      GFL = .TRUE.
      NE = NEND
      NNEQ = NDF*NUMNP
      NPLD = 0
      WRITE(6,2001) O,HEAD
C.... READ MACRO CARDS
      LL = 1
      LMAX = 16
      CALL SETMEM(NE+LMAX*4*IPR)
      CT(1,1) = WD(7)
      CT(3,1) = 1.0
100   LL = LL + 1
      IF(LL.LT.LMAX) GO TO 110
      LMAX = LMAX + 16
      CALL SETMEM(NE+LMAX*4*IPR)
110   READ(5,1000)  (CT(J,LL),J=1,4)
      WRITE(6,2000)  (CT(J,LL),J=1,4)
      IF(.NOT.PCOMP(CT(1,LL),ENDM)) GO TO 100
200   CT(1,LL)= WD(8)
C.... SET LOOP MARKERS
      NE = NE + LMAX*4*IPR
      LX = LL - 1
      DO 230 L = 1,LX
      IF(.NOT.PCOMP(CT(1,L),WD(7))) GO TO 230
      J = 1
      K = L + 1
      DO 210 I = K,LL
      IF(PCOMP(CT(1,I),WD(7))) J = J + 1
      IF(J.GT.9) GO TO 401
      IF(PCOMP(CT(1,I),WD(8))) J = J - 1
210   IF(J.EQ.0) GO TO 220 
      GO TO 400 
220   CT(4,I) = L 
      CT(4,L) = I 
230   CONTINUE 
      J = 0 
      DO 240 L = 1,LL
      IF(PCOMP(CT(1,L),WD(7))) J = J + 1
240   IF(PCOMP(CT(1,L),WD(8))) J = J - 1 
      IF(J.NE.0) GO TO 400 
C.... EXECUTE MACRO INSTRUCTION PROGRAM 
      LV = 0
      L = 1
299   DO 300 J = 1,NWD 
300   IF(PCOMP(CT(1,L),WD(J))) GO TO 310 
      GO TO 330 
310   I = L - 1 
      IF(L.NE.1.AND.L.NE.LL) 
     1WRITE(6,2010) I,(CT(K,L),K = 1,4)
      GO TO (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21),J
C.... SET SOLUTION TOLERANCE 
1     TOL = CT(3,L) 
      GO TO 330 
C.... SET TIME INCREMENT 
2     DT = CT(3,L) 
      GO TO 330 
C.... PRINT STRESS VALUES 
3     LX = LVE(LV) 
      IF(AMOD(CT(3,LX),AMAX1(CT(3,L),1.)).EQ.0.0) 
     1 CALL PFORM(UL,XL,TL,LD,P,S,IE,D,ID,X,IX,F,T,JDIAG,DR,DR,DR,
     2   NDF,NDM,NEN1,NST,4,B,M(NV),.FALSE.,.FALSE.,.FALSE.,.FALSE.)
       GO TO 330
C.... PRINT DISPLACEMENT 
4     LX = LVE(LV) 
      IF(AMOD(CT(3,LX),AMAX1(CT(3,L),1.)).NE.0.0) GO TO 330 
      WRITE(6,2003) O,HEAD,TIME,PROP
      CALL PRTDIS(ID,X,B,F,NDM,NDF)
      GO TO 330
C.... FORM TANGENT STIFFNESS 
19    IF(CFL) CALL PSETM(NC,NE,JDIAG(NEQ)*IPR,CFL) 
      CALL PZERO(M(NC),JDIAG(NEQ)) 
      CFR = .TRUE.
5     IF(J.EQ.5) CFR = .FALSE. 
      IF(GFL) CALL PSETM(NA,NE,JDIAG(NEQ)*IPR,GFL) 
      IF(NPLD.GT.0) PROP = PROPLD(TIME,0)
      CALL PZERO(M(NA),JDIAG(NEQ))
      CALL PFORM(UL,XL,TL,LD,P,S,IE,D,ID,X,IX,F,T,JDIAG,DR,M(NA),M(NC),
     2   NDF,NDM,NEN1,NST,3,B,M(NV),.TRUE.,.FALSE.,CFR,.FALSE.)
      AFR = .TRUE.
      GO TO 330
C.... FORM OUT OF BALANCE FORCE FOR TIME STEP/ITERATION 
6     IF(NPLD.GT.0) PROP = PROPLD(TIME,0) 
      CALL PLOAD(ID,F,DR,NNEQ,PROP) 
      CALL PFORM(UL,XL,TL,LD,P,S,IE,D,ID,X,IX,F,T,JDIAG,DR,DR,DR,
     2   NDF,NDM,NEN1,NST,6,B,M(NV),.FALSE.,.TRUE.,.FALSE.,.FALSE.)
      BFR = .TRUE.
      RN = 0.
      DO 61 N = 1,NEQ
61    RN = RN + DR(N)**2 
      RN = SQRT(RN) 
      RNMAX = AMAX1(RNMAX,RN)
      WRITE(6,2005) RNMAX,RN,TOL
      IF(RN.GE.RNMAX*TOL) GO TO 330
      LX = LVE(LV)
      L0 = LVS(LV)
      CT(3,LX) = CT(3,L0)
      L = LX - 1
      GO TO 330
C.... SET LOOP START INDICATORS
7     LV = LV + 1
      LX = CT(4,L)
      LVS(LV) = L
      LVE(LV) = LX
      CT(3,LX) = 1.
      GO TO 330
C.... LOOP TERMINATOR CONTROL
8     N = CT(4,L)
      CT(3,L) = CT(3,L) + 1.0
      IF(CT(3,L).GT.CT(3,N)) LV = LV - 1
      IF(CT(3,L).LE.CT(3,N)) L = N
      GO TO 330 
C.... INPUT PROPORTIONAL LOAD TABLE 
9     NPLD = CT(3,L) 
      PROP = PROPLD(0.,NPLD) 
      GO TO 330
C.... READ COMMANDS 
10    READ(5,1000) (CTL(I),I=1,4) 
      IF(.NOT.PCOMP(CT(2,L),CTL(1))) GO TO 402 
      IF(PCOMP(CTL(1),WD(1))) TOL = CTL(3)
      IF(PCOMP(CTL(1),WD(2))) DT = CTL(3)
      GO TO 330
C.... INCREMENT TIME 
11    TIME = TIME + DT 
      RNMAX = 0.0 
      UN = 0.0
      GO TO 330
C.... COMPUTE CONVERGENCE TEST 
12    RN = 0.0 
      DO 121 N = 1,NEQ 
      UN = UN + B(N)**2
121   RN = RN + DR(N)**2 
      UN = AMAX1(UN,RN) 
      CN = SQRT(UN)
      RN = SQRT(RN)
      WRITE(6,2002) CN,RN,TOL
      LX = LVE(LV) 
      L0 = LVS(LV)
      IF(RN.LT.CN*TOL) CT(3,LX) = CT(3,L0)
      GO TO 330
C.... SOLVE THE EQUATIONS 
13    IF(CFR) GO TO 131 
      CALL ACTCOL(M(NA),DR,JDIAG,NEQ,AFR,BFR) 
      GO TO 132
131   CALL UACTCL(M(NA),M(NC),DR,JDIAG,NEQ,AFR,BFR) 
132   AFR = .FALSE. 
      IF(.NOT.BFR) GO TO 330 
      BFR = .FALSE.
      DO 133 N = 1,NEQ
133   B(N) = B(N) + DR(N) 
      GO TO 330 
C.... FORM A LUMPED MASS APPROXIMATION 
14    AFL = .FALSE. 
      BFL = .TRUE. 
      IF(EFL) CALL PSETM(NN,NE,NEQ*IPR,EFL)
139   CALL PZERO(M(NN),NEQ) 
      GO TO 140 
C.... FORM A CONSISTENT MASS APPROXIMATION 
15    AFL = .TRUE. 
      BFL = .FALSE. 
      IF(DFL) CALL PSETM(NM,NE,JDIAG(NEQ)*IPR,DFL)
152   CALL PZERO(M(NM),JDIAG(NEQ)) 
140   CALL PFORM(UL,XL,TL,LD,P,S,IE,D,ID,X,IX,F,T,JDIAG,M(NN),M(NM), 
     1  M(NM),NDF,NDM,NEN1,NST,5,B,M(NV),AFL,BFL,.FALSE.,.FALSE.) 
      GO TO 330
16    I = -1 
      CALL PMESH(LD,IE,D,ID,X,IX,F,T,NDF,NDM,NEN1,I) 
      IF(I.GT.0) GO TO 404
      GO TO 330
17    J = NM 
      IF(DFL) J = NN 
      CALL PEIGS(M(NA),M(J),F,X,B,DR,ID,IX,JDIAG,NDF,NDM,NEN1,DFL)
      GO TO 330
18    IF(FFL) GO TO 181 
C.... MACRO *EXCD* EXPLICIT INTEGRATION OF EQUATIONS OF MOTION 
      NQ = NE
      NV = NQ + NEQ*IPR 
      NR = NV + NDF*NUMNP*IPR
      NE = NR + NEQ*IPR
      CALL SETMEM(NE+1)
      CALL PZERO(M(NQ),NE-NQ)
      FFL = .TRUE.
      GO TO 330
181   IF(.NOT.BFR.OR.EFL) GO TO 403 
      CALL EUPDAT(DR,B,M(NQ),M(NR),M(NN),DT,NEQ) 
      GO TO 330
C.... COMPUTE REACTIONS AND PRINT 
20    CALL PZERO(DR,NNEQ) 
      CALL PFORM(UL,XL,TL,LD,P,S,IE,D,ID,X,IX,F,T,JDIAG,DR,DR,DR, 
     1   NDF,NDM,NEN1,NST,6,B,M(NV),.FALSE.,.TRUE.,.FALSE.,.TRUE.)
      CALL PRTREA(DR,NDF)
      GO TO 330
21    CALL PFORM(UL,XL,TL,LD,P,S,IE,D,ID,X,IX,F,T,JDIAG,DR,DR,DR, 
     1   NDF,NDM,NEN1,NST,2,B,F,.FALSE.,.FALSE.,.FALSE.,.FALSE.)
330   L = L + 1 
      IF(L.GT.LL) RETURN 
      GO TO 299
400   WRITE(6,4000) 
      RETURN 
401   WRITE(6,4001) 
      RETURN 
402   WRITE(6,4002) 
      RETURN 
403   WRITE(6,4003) 
404   WRITE(6,4004) 
      RETURN 
1000  FORMAT(A4,1X,A4,1X,2F5.0)
2000  FORMAT(10X,A4,1X,A4,1X,2G15.5)       
2001  FORMAT(A1,20A4//5X,18HMACRO INSTRUCTIONS//5X,15HMACRO STATEMENT,5X 
     1,10HVARIABLE 1,5X,10HVARIABLE 2) 
2002  FORMAT(5X,29HDISPLACEMENT CONVERGENCE TEST/10X,7HUNMAX =,G15.5,5X, 
     1   7HUN    =,G15.5,5X,7HTOL   =,G15.5) 
2003  FORMAT(A1,20A4,10X,4HTIME,G13.5//5X,17HPROPORTIONAL LOAD,G13.5)
2004  FORMAT(5X,4HCN =,G12.5,5X,4HDN =,G12.5,5X,4HUN =,G12.5,5X,4HAG = 
     1   ,G12.5,5X,4HAC =,G12.5) 
2005  FORMAT(5X,22HFORCE CONVERGENCE TEST/10X,7HRNMAX =,G15.5,5X, 
     1   7HRN    =,G15.5,5X,7HTOL   =,G15.5) 
2010  FORMAT(2X,19H**MACRO INSTRUCTION,I4,13H EXECUTED**  ,2(A4,2X), 6H 
     1V1 = ,G13.4, 8H , V2 = ,G13.4) 
4000  FORMAT(5X,46H**FATAL ERROR 10** UNBALANCED LOOP/NEXT MACROS ) 
4001  FORMAT(5X,45H**FATAL ERROR 11** LOOPS NESTED DEEPER THAN 8) 
4002  FORMAT(5X,57H**FATAL ERROR 12** MACRO LABEL MISMATCH ON A READ COM 
     1MAND) 
4003  FORMAT(5X,63H**FATAL ERROR 13** MACRO EXED MUST BE PRECEDED BY LMA 
     1S AND FORM)
4004  FORMAT(5X,84H**FATAL ERROR 14** ATTEMPT TO CHANGE BOUNDARY RESTRAI 
     1NT CODFS DURING MACRO EXECUTION ) 
      END
C
      SUBROUTINE ACTCOL(A,B,JDIAG,NEQ,AFAC,BACK)
      LOGICAL AFAC,BACK
      COMMON/ENGYS/ AENGY
      DIMENSION A(1),B(1),JDIAG(1)
C 
C.... ACTIVE COLUMN PROFILE SYMMETRIC EQUATION SOLVER 
C 
C.... FACTOR A TO UT*D*U, REDUCE B 
      AENGY = 0.0 
      JR = 0
      DO 600 J = 1,NEQ
      JD = JDIAG(J)
      JH = JD - JR
      IS = J - JH + 2 
      IF(JH-2) 600,300,100
100   IF(.NOT.AFAC) GO TO 500 
      IE = J - 1 
      K = JR + 2
      ID = JDIAG(IS - 1)
C.... REDUCE ALL EQUATIONS EXCEPT DIAGONAL
      DO 200 I = IS,IE 
      IR = ID
      ID = JDIAG(I)
      IH = MIN0(ID-IR-1,I-IS+1)
      IF(IH.GT.0) A(K) = A(K) - DOT(A(K-IH),A(ID-IH),IH)
200   K = K + 1 
C.... REDUCE DIAGONAL TERM 
300   IF(.NOT.AFAC) GO TO 500 
      IR = JR + 1 
      IE = JD - 1
      K = J - JD
      DO 400 I = IR,IE
      ID = JDIAG(K+I)
      IF(A(ID).EQ.0.0) GO TO 400
      D = A(I)
      A(I) = A(I)/A(ID) 
      A(JD) = A(JD) - D*A(I)
400   CONTINUE 
C.... REDUCE RHS 
500   IF(BACK) B(J) = B(J) - DOT(A(JR+1),B(IS-1),JH-1) 
600   JR = JD 
      IF(.NOT.BACK) RETURN 
C.... DIVIDE BY DIAGONAL PIVOTS 
      DO 700 I = 1,NEQ 
      ID = JDIAG(I)
      IF(A(ID).NE.0.0) B(I) = B(I)/A(ID)
700   AENGY = AENGY + B(I)*B(I)*A(ID) 
C.... BACKSUBSTITUTE 
      J = NEQ 
      JD = JDIAG(J)
800   D = B(J) 
      J = J - 1 
      IF(J.LE.0) RETURN
      JR = JDIAG(J)
      IF(JD-JR.LE.1) GO TO 1000
      IS = J - JD + JR + 2
      K = JR - IS + 1
      DO 900 I = IS,J
900   B(I) = B(I) - A(I+K)*D 
1000  JD = JR 
      GO TO 800 
      END
C
      SUBROUTINE ADDSTF(A,B,C,S,P,JDIAG,LD,NST,NFL,AFL,BFL,CFL)
C       
C.... ASSEMBLE GLOBAL ARRAYS 
C 
      LOGICAL AFL,BFL,CFL 
      DIMENSION A(1),B(1),JDIAG(1),P(1),S(NST,1),LD(1) ,C(1)
      DO 200 J = 1,NST
      K = LD(J)
      IF(K.EQ.0) GO TO 200
      IF(BFL) B(K) = B(K) + P(J)
      IF(.NOT.AFL.AND..NOT.CFL) GO TO 200
      L = JDIAG(K) - K
      DO 100 I = 1,NST
      M = LD(I)
      IF(M.GT.K.OR.M.EQ.0) GO TO 100
      M = L + M 
      IF(AFL) A(M) = A(M) + S(I,J)
      IF(CFL) C(M) = C(M) + S(J,I)
100   CONTINUE 
200   CONTINUE 
      RETURN
      END
C
      FUNCTION   DOT(A,B,N)
C 
C.... VECTOR DOT PRODUCT 
C    
      DIMENSION A(1),B(1) 
      DOT = 0.0
      DO 100 I = 1,N
100   DOT = DOT + A(I)*B(I) 
      RETURN 
      END
C
      SUBROUTINE ELMLIB(D,U,X,IX,T,S,P,I,J,K,ISW)
C 
C.... ELEMENT LIBRARY 
C 
      COMMON /ELDATA/ DM,N,MA,MCT,IEL,NEL 
      DIMENSION P(K),S(K,K),D(1),U(1),X(1),IX(1),T(1)
      IF(IEL.LE.0.OR.IEL.GT.3) GO TO 400
      IF(ISW.LT.3) GO TO 30
      DO 20 L = 1,K
      P(L) = 0.0
      DO 20 M = 1,K
20    S(L,M) = 0.0 
30    GO TO (1,2,3) IEL 
1     CALL ELMT01(D,U,X,IX,T,S,P,I,J,K,ISW) 
      GO TO 10 
2     CALL ELMT02(D,U,X,IX,T,S,P,I,J,K,ISW) 
      GO TO 10 
3     CALL ELMT03(D,U,X,IX,T,S,P,I,J,K,ISW) 
10    RETURN
400   WRITE(6,4000) IEL
      STOP
4000  FORMAT(5X,39H**FATAL ERROR 04** ELEMENT CLASS NUMBER,I3,6H INPUT)
      END
C
      SUBROUTINE EUPDAT(DR,U,V,A,XM,DT,NEQ)
      DIMENSION U(1),V(1),A(1),DR(1),XM(1)
C.... UPDATE SOLUTION USING EXPLICIT CENTRAL DIFFERENCES
      DATA DTHP/0.0/
      DTH = DT/2.
      DTAV = DTH + DTHP
      DTHP = DTH
      DO 100 N = 1,NEQ
      A(N) = DR(N)/XM(N)
      V(N) = V(N) + DTAV*A(N)
100   U(N) = U(N) + DT*V(N)
      RETURN
      END
C
      SUBROUTINE NORM(X,Y,N)
C
C.... NORMALIZE VECTOR Y TO UNIT VECTOR X
C
      DIMENSION X(1),Y(1)
      SCALE = SQRT(DOT(Y,Y,N))
      DO 100 I = 1,N
100   X(I) = Y(I)/SCALE
      RETURN
      END
C
      LOGICAL FUNCTION PCOMP(A,B)
      PCOMP = .FALSE.
C.... IT MAY BE NECESSARY TO REPLACE THE FOLLOWING ALPHANUMERIC
C.... COMPARISON STATEMENT IF COMPUTER PRODUCES AN OVERFLOW
      IF(A.EQ.B) PCOMP = .TRUE.
      RETURN
      END
C
      SUBROUTINE PEIGS(A,B,F,X,Y,Z,ID,IX,JDIAG,NDF,NDM,NEN1,DFL)
C
C.... COMPUTE DOMINANT EIGANVALUE BY INVERSE ITERATION
C
      LOGICAL DFL
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      COMMON/ENGYS/ AENGY
      DIMENSION A(1),B(1),F(1),X(1),Y(1),Z(1),ID(1),IX(1),JDIAG(1)
      DATA ITS/100/,TOL/1.E-9/
C.... GET START VECTOR FROM DIAGONAL OF MASS MATRIX
      DO 100 I = 1,NEQ
      J = JDIAG(I)
      IF(DFL) J = 1
100   Y(I) = B(J)
      EIGP = 0.
      CALL ACTCOL(A,Z,JDIAG,NEQ,.TRUE.,.FALSE.)
      DO 200 I = 1,ITS
      CALL PZERO(Z,NEQ)
      CALL PROMUL(B,Y,Z,JDIAG,NEQ)
C.... RAYLEIGH QUOTIENT 
      EIG = AENGY/DOT(Y,Z,NEQ) 
      IF(ABS(EIG-EIGP).LT.TOL*ABS(EIG)) GO TO 300
      CALL NORM(Y,Z,NEQ)
      EIGP = EIG
C.... INVERSE ITERATION 
200   CALL ACTCOL(A,Y,JDIAG,NEQ,.FALSE.,.TRUE.) 
      WRITE(6,2001) ITS
      RETURN
300   WRITE(6,2000) O,HEAD,EIG,I 
      CALL NORM(Z,Y,NEQ) 
      CALL PRTDIS(ID,X,Z,F,NDM,NDF)
      RETURN
2000  FORMAT(A1,20A4//5X,14HEIGENVALUE =  ,G13.4/5X,14HITERATIONS =  , 
     1   I9/) 
2001  FORMAT(5X,57H**FATAL ERROR 09** NO CONVERGENCE IN EIGENVALUES, ITS 
     1 =  ,I5) 
      END
C
      SUBROUTINE PFORM(UL,XL,TL,LD,P,S,IE,D,ID,X,IX,F,T,JDIAG,B,A,C,NDF,
     1   NDM,NEN1,NST,ISW,U,UD,AFL,BFL,CFL,DFL)
C 
C.... COMPUTE ELEMENT ARRAYS AND ASSEMBLE GLOBAL ARRAYS 
C 
      LOGICAL AFL,BFL,CFL,DFL 
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      COMMON /ELDATA/ DM,N,MA,MCT,IEL,NEL 
      COMMON /PRLOD/ PROP
      DIMENSION XL(NDM,1),LD(NDF,1),P(1),S(NST,1),IE(1),D(10,1),ID(NDF,1
     1),X(NDF,1),IX(NEN1,1),F(NDF,1),JDIAG(1),B(1),A(1),C(1),UL(NDF,1)
     2   ,TL(1),T(1),U(1),UD(NDF,1)
C.... LOOP ON ELEMENTS
      TEL = 0
      DO 110 N = 1,NUMEL
C.... SET UP LOCAL ARRAYS
      DO 108 I = 1,NEN
      II = IX(I,N)
      IF(II.NE.0) GO TO 105
      TL(I) = 0.
      DO 103 J = 1,NDM
103   XL(J,I) = 0.
      DO 104 J = 1,NDF
      UL(J,I) = 0.
      UL(J,I+NEN)=0.
104   LD(J,I) = 0
      GO TO 108
105   IID = II*NDF - NDF
      NEL = I
      TL(I) = T(II)
      DO 106 J = 1,NDM
106   XL(J,I) = X(J,II)
      DO 107 J = 1,NDF
      K = IABS(ID(J,II))
      UL(J,I) = F(J,II)*PROP
      UL(J,I+NEN)=UD(J,II)
      IF(K.GT.0) UL(J,I) = U(K)
      IF(DFL) K = IID + J
107   LD(J,I) = K 
108   CONTINUE 
C.... FORM ELEMENT ARRAY 
      MA = IX(NEN1,N) 
      IF(IE(MA).NE.IEL) MCT = 0
      IEL = IE(MA)
      CALL ELMLIB(D(1,MA),UL,XL,IX(1,N),TL,S,P,NDF,NDM,NST,ISW)
C.... ADD TO TOTAL ARRAY 
      IF(AFL.OR.BFL.OR.CFL) CALL ADDSTF(A,B,C,S,P,JDIAG,LD,NST,NEL*NDF, 
     1   AFL,BFL,CFL)
110   CONTINUE 
      RETURN 
      END
C
      SUBROUTINE PLOAD(ID,F,B,NN,P)
C       
C....FOM LOAD VECTOR IN COMPACT FORM 
C 
      DIMENSION ID(1),F(1),B(1) 
      DO 100 N = 1,NN
      J = ID(N)
100   IF(J.GT.0) B(J) = F(N)*P 
      RETURN 
      END
C
      SUBROUTINE PROFIL (JDIAG,ID,IX,NDF,NEN1,NAD)
C 
C.... COMPUTE PROFILE OF GLOBAL ARRAYS 
C 
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      DIMENSION JDIAG(1),ID(NDF,1),IX(NEN1,1)       
C.... SET UP THE EQUATION NUMBERS
      NEQ = 0 
      DO 50 N = 1,NUMNP
      DO 40 I = 1,NDF
      J = ID(I,N)
      IF(J) 30,20,30
20    NEQ = NEQ + 1 
      ID(I,N) = NEQ 
      JDIAG(NEQ) = 0
      GO TO 40
30    ID(I,N) = 0 
40    CONTINUE 
50    CONTINUE 
C.... COMPUTE COLUMN HEIGHTS 
      DO 500 N = 1,NUMEL 
      DO 400 I = 1,NEN
      II = IX(I,N)
      IF(II.EQ.0) GO TO 400
      DO 300 K = 1,NDF
      KK = ID(K,II)
      IF(KK.EQ.0) GO TO 300
      DO 200 J = I,NEN
      JJ = IX(J,N)
      IF(JJ.EQ.0) GO TO 200
      DO 100 L = 1,NDF
      LL = ID(L,JJ)
      IF(LL.EQ.0) GO TO 100
      M = MAX0(KK,LL)
      JDIAG(M) = MAX0(JDIAG(M),IABS(KK-LL))
100   CONTINUE 
200   CONTINUE 
300   CONTINUE 
400   CONTINUE 
500   CONTINUE 
C.... COMPUTE DIAGONAL POINTERS FOR PROFILE 
      NAD = 1 
      JDIAG(1) = 1
      IF(NEQ.EQ.1) RETURN
      DO 600 N = 2,NEQ
600   JDIAG(N) = JDIAG(N) + JDIAG(N-1) + 1
      NAD = JDIAG(NEQ)
      RETURN
      END
C
      SUBROUTINE PROMUL(A,B,C,JDIAG,NEQ)
      DIMENSION A(1),B(1),C(1),JDIAG(1)
C
C.... ROUTINE TO FORM C = C + A*B WHERE A IS A SYMMETRIC SQUARE MATRIX
C.... STORED IN PROFILE FORM, B,C ARE VECTORS, AND JDIAG LOCATES THE
C.... DIAGONALS IN A.
C
      JS = 1
      DO 200 J = 1,NEQ
      JD = JDIAG(J)
      IF(JS.GT.JD) GO TO 200
      BJ = B(J)
      AB = A(JD)*BJ
      IF(JS.EQ.JD) GO TO 150
      JB = J - JD
      JE = JD + 1
      DO 100 JJ = JS,JE
      AB = AB + A(JJ)*B(JJ+JB)
100   C(JJ+JB) = C(JJ+JB) + A(JJ)*BJ
150   C(J) = C(J) + AB
200   JS = JD + 1
      RETURN
      END
C
      FUNCTION PROPLD(T,J)
C 
C.... PROPROTIONAL LOAD TABLE (ONE LOAD CARD ONLY) 
C 
      DIMENSION A(5) 
      IF(J.GT.0) GO TO 200
C.... COMPUTE VALUE AT TIME T 
      PROPLD = 0.0 
      IF(T.LT.TMIN.OR.T.GT.TMAX) RETURN
      L = MAX0(L,1) 
      PROPLD = A(1) + A(2)*T + A(3)*(SIN(A(4)*T+A(5)))**L
      RETURN
C.... INPUT TABLE OF PROPORTIONAL LOADS 
200   I = 1 
      READ(5,1000)    K,L,TMIN,TMAX,A 
      WRITE(6,2000) I,K,L,TMIN,TMAX,A
      RETURN 
1000  FORMAT(2I5,7F10.0) 
2000  FORMAT(5X,23HPROPORTIONAL LOAD TABLE//24H  NUMBER    TYPE    EXP.,
     1 14H  MINIMUM TIME,15H   MAXIMUM TIME, 5X,2HA1,13X,2HA2,13X,2HA3, 
     2   13X,2HA4,13X,2HA5/(3I8,7G15.5))
      END
C
      SUBROUTINE PRTDIS(ID,X,B,F,NDM,NDF)
C 
C.... OUTPUT NODAL VALUES 
C 
      LOGICAL PCOMP 
      COMMON/PRLOD/ PROP
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      COMMON /LABEL/ PDIS(6),A(6),BC(2),DI(6),CD(3),TE(3),FD(3)     
      COMMON /TDATA/ TIME,DT,C1,C2,C3,C4,C5
      DIMENSION X(NDM,1),B(1),UL(6),ID(NDF,1),F(NDF,1) 
      DATA BL/4HBLAN/
      DO 102 II = 1,NUMNP,50
      WRITE(6,2000) O,HEAD,TIME,(I,CD(1),CD(2),I=1,NDM),(I,DI(1)
     1   ,DI(2),I=1,NDF)
      JJ = MIN0(NUMNP,II+49)
      DO 102 N = II,JJ
      IF(PCOMP(X(1,N),BL)) GO TO 101
      DO 100 I = 1,NDF
      UL(I) = F(I,N)*PROP
      K = IABS(ID(I,N))
100   IF(K.GT.0) UL(I) = B(K)
      WRITE(6,PDIS) N,(X(I,N),I=1,NDM),(UL(I),I=1,NDF)
101   CONTINUE
102   CONTINUE
      RETURN
2000  FORMAT(A1,20A4//5X,19HNODAL DISPLACEMENTS,5X,4HTIME,E13.5//
     1   6X,4HNODE,9(I7,A4,A2))
      END
C
      SUBROUTINE PRTREA(R,NDF)
C 
C.... PRINT NODAL REACTIONS 
C 
      DIMENSION R(NDF,1),RSUM(6),ASUM(6) 
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      DO 50 K = 1,NDF
      RSUM(K) = 0.
50    ASUM(K) = 0. 
      DO 100 N = 1,NUMNP,50 
      J = MIN0(NUMNP,N+49)
      WRITE(6,2000) 0,HEAD,(K,K=1,NDF)
      DO 100 I = N,J
      DO 75 K = 1,NDF
      R(K,I) = -R(K,I)
      RSUM(K) = RSUM(K) + R(K,I)
75    ASUM(K) = ASUM(K) + ABS(R(K,I)) 
100   WRITE(6,2001) I,(R(K,I),K=1,NDF) 
C.... PRINT STATICS CHECK 
      WRITE(6,2002) (RSUM(K),K=1,NDF) 
      WRITE(6,2003) (ASUM(K),K=1,NDF)
      RETURN
2000  FORMAT(A1,20A4//5X,15HNODAL REACTIONS//6X,4HNODE, 
     1  6(I9,4H DOF))
2001  FORMAT(I10,6E13.4)
2002  FORMAT(/7X,3HSUM,6E13.4) 
2003  FORMAT(/3X,7HABS SUM,6E13.4) 
      END 
C
      SUBROUTINE PSETM(NA,NE,NJ,AFL)
C 
C.... SET POINTER FOR ARRAYS 
C 
      LOGICAL AFL 
      NA = NE
      NE = NE + NJ
      AFL = .FALSE.
      CALL SETMEM(NE)
      RETURN
      END
C
      SUBROUTINE PZERO(V,NN)
C 
C.... ZERO REAL ARRAY 
C 
      DIMENSION V(NN) 
      DO 100 N = 1,NN
100   V(N) = 0.0 
      RETURN  
      END
C
      SUBROUTINE UACTCL(A,C,B,JDIAG,NEQ,AFAC,BACK)
      LOGICAL AFAC, BACK
      DIMENSION A(1),B(1),JDIAG(1),C(1)
C 
C.... UNSYMMETRIC, ACTIVE COLUMN PROFILE EQUATION SOLVER 
C 
C.... FACTOR A TO UT*D*U, RETUCE B TO Y 
      JR = 0 
      DO 300 J = 1,NEQ
      JD = JDIAG(J)
      JH = JD - JR
      IF(JH.LE.1) GO TO 300
      IS = J + 1 - JH
      IE = J - 1
      IF(.NOT.AFAC) GO TO 250
      K = JR + 1
      ID = 0
C.... REDUCE ALL EQUATIONS EXCEPT DIAGONAL 
      DO 200 I = IS,IE 
      IR = ID
      ID = JDIAG(I)
      IH = MIN0(ID - IR - 1,I - IS)
      IF(IH.EQ.0) GO TO 150
      A(K) = A(K) - DOT(A(K-IH),C(ID-IH),IH)
      C(K) = C(K) - DOT(C(K-IH),A(ID-IH),IH)
150   IF(A(ID).NE.0.0) C(K) = C(K)/A(ID)
200   K = K + 1
C.... REDUCE DIAGONAL TERM
      A(JD) = A(JD) - DOT(A(JR+1),C(JR+1),JH-1)
C.... FORWARD REDUCE THE R.H.S
250   IF(BACK) B(J) = B(J) - DOT(C(JR+1),B(IS),JH-1)
300   JR = JD
      IF(.NOT.BACK) RETURN
C.... BACK SUBSTITUTION
      J = NEQ
      JD = JDIAG(J)
500   IF(A(JD).NE.0.0) B(J) = B(J)/A(JD) 
      D = B(J) 
      J = J - 1
      IF(J.LE.0) RETURN
      JR = JDIAG(J)
      IF(JD - JR.LE.1) GO TO 700
      IS = J -JD + JR + 2
      K = JR - IS + 1
      DO 600 I = IS,J
600   B(I) = B(I) - A(I+K)*D 
700   JD = JR 
      GO TO 500 
      END
C
C******************************************************************************
C 
C ELEMENT MODULES
C 
C******************************************************************************
C 
      SUBROUTINE ELMT01(D,UL,XL,IX,TL,S,P,NDF,NDM,NST,ISW)
C
C.... PLANE LINEAR ELASTIC ELEMENT ROUTINE
C
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      COMMON /ELDATA/ DM,N,MA,MCT,IEL,NEL
      DIMENSION D(10),UL(NDF,1),XL(NDM,1),IX(NUMEL),TL(1),S(NST,1),P(1)
     1  ,SHP(3,9),SG(9),TG(9),WG(9),SIG(6),EPS(3),WD(2)  
      DATA WD/4HRESS,4HRAIN/
C.... GO TO CORRECT ARRAY PROCESSOR 
      GO TO(1,2,3,4,5,4), ISW 
C.... INPUT MATERIAL PROPERTIES 
1     READ(5,1000) E,XNU,D(4),L,K,I 
      IF(I.NE.0) I = 1 
      IF(I.EQ.0) I = 2 
      D(1) = E*(1.+(1-I)*XNU)/(1.+XNU)/(1.-I*XNU)
      D(2) = XNU*D(1)/(1.+(1-I)*XNU)
      D(3) = E/2./(1.+XNU)
      L = MIN0(3,MAX0(1,L))
      D(5) = L
      K = MIN0(3,MAX0(1,K))
      D(6) = K
      LINT = 0
      WRITE(6,2000) WD(I),E,XNU,D(4),L,K
      RETURN
2     RETURN 
3     L = D(5) 
      IF(L*L.NE.LINT) CALL PGAUSS(L,LINT,SG,TG,WG) 
C.... FAST STIFFNESS COMPUTATION,  COMPUTE INTEGRALS OF SHAPE FUNCTIONS
      DO 320 L = 1,LINT 
      CALL SHAPE(SG(L),TG(L),XL,SHP,XSJ,NDM,NEL,IX,.FALSE.)
      XSJ = XSJ*WG(L)
C.... LOOP OVER ROWS
      J1 = 1
      DO 320 J = 1,NEL
      W11 = SHP(1,J)*XSJ
      W12 = SHP(2,J)*XSJ
C.... LOOP OVER COLUMNS (SYMMETRY NOTED)
      K1 = J1
      DO 310 K = J,NEL
      S(J1  ,K1  ) = S(J1  ,K1  ) + W11*SHP(1,K)
      S(J1  ,K1+1) = S(J1  ,K1+1) + W11*SHP(2,K)
      S(J1+1,K1  ) = S(J1+1,K1  ) + W12*SHP(1,K)
      S(J1+1,K1+1) = S(J1+1,K1+1) + W12*SHP(2,K)
310   K1 = K1 + NDF
320   J1 = J1 + NDF
C.... ASSEMBLE THE STIFFNESS MATRIX FROM INTEGRALS AND MATERIAL PROPS.
      NSL = NEL*NDF
      DO 330 J = 1,NSL,NDF
      DO 330 K = J,NSL,NDF
      W11 = S(J,K)
      W12 = S(J,K+1)
      W21 = S(J+1,K)
      W22 = S(J+1,K+1)
      S(J  ,K  ) = D(1)*W11 + D(3)*W22
      S(J  ,K+1) = D(2)*W12 + D(3)*W21
      S(J+1,K  ) = D(2)*W21 + D(3)*W12
      S(J+1,K+1) = D(1)*W22 + D(3)*W11
C.... FORM LOWER PART BY SYMMETRY
      S(K,J) = S(J,K)
      S(K,J+1) = S(J+1,K)
      S(K+1,J) = S(J,K+1)
330   S(K+1,J+1) = S(J+1,K+1)
      RETURN
4     L = D(5)
      IF(ISW.EQ.4) L = D(6)
      IF(L*L.NE.LINT) CALL PGAUSS(L,LINT,SG,TG,WG)
C.... COMPUTE ELEMENT STRESSES, STRAINS, AND FORCES 
      DO 600 L = 1,LINT 
C.... COMPUTE ELEMENT SHAPE FUNCTIONS 
      CALL SHAPE(SG(L),TG(L),XL,SHP,XSJ,NDM,NEL,IX,.FALSE.) 
C.... COMPUTE STRAINS AND COORDINATES 
      DO 410 I = 1,3
410   EPS(I) = 0.0 
      XX = 0.0 
      YY = 0.0
      DO 420 J = 1,NEL
      XX = XX + SHP(3,J)*XL(1,J)
      YY = YY + SHP(3,J)*XL(2,J)
      EPS(1) = EPS(1) + SHP(1,J)*UL(1,J)
      EPS(3) = EPS(3) + SHP(2,J)*UL(2,J)
420   EPS(2) = EPS(2) + SHP(1,J)*UL(2,J) + SHP(2,J)*UL(1,J)
C.... COMPUTE STRESSES
      SIG(1) = D(1)*EPS(1) + D(2)*EPS(3)
      SIG(3) = D(2)*EPS(1) + D(1)*EPS(3)
      SIG(2) = D(3)*EPS(2)
      IF(ISW.EQ.6) GO TO 620
      CALL PSTRES(SIG,SIG(4),SIG(5),SIG(6))
C.... OUTPUT STRESSES AND STRAINS 
      MCT = MCT - 2 
      IF(MCT.GT.0) GO TO 430
      WRITE(6,2001) O,HEAD
      MCT = 50
430   WRITE(6,2002) N,MA,XX,YY,SIG,EPS 
      GO TO 600 
C.... COMPUTE INTERNAL FORCES 
620   DV = XSJ*WG(L) 
      J1 = 1 
      DO 610 J = 1,NEL
      P(J1) = P(J1) - (SHP(1,J)*SIG(1) + SHP(2,J)*SIG(2))*DV
      P(J1+1) = P(J1+1) - (SHP(1,J)*SIG(2) + SHP(2,J)*SIG(3))*DV
610   J1 = J1 + NDF 
600   CONTINUE 
      RETURN
C.... COMPUTE CONSTISTENT MASS MATRIX 
5     L = D(5) 
      IF(L*L.NE.LINT) CALL PGAUSS(L,LINT,SG,TG,WG) 
      DO 500 L = 1,LINT
C.... COMPUTE SHAPE FUNCTIONS 
      CALL SHAPE(SG(L),TG(L),XL,SHP,XSJ,NDM,NEL,IX,.FALSE.) 
      DV = WG(L)*XSJ*D(4)
C.... FOR EACH NODE J COMPUTE DB = RHO*SHAPE*DV 
      J1 = 1 
      DO 500 J = 1,NEL
      W11 = SHP(3,J)*DV
C.... FOR EACH NODE K COMPUTE MASS MATRIX (UPPER TRIANGULAR PART) 
      K1 = J1 
      DO 510 K = J,NEL
      S(J1,K1) = S(J1,K1) + SHP(3,K)*W11
510   K1 = K1 + NDF 
500   J1 = J1 + NDF 
C.... COMPUTE MISSING PARTS AND LOWER PART BY SYMMETRIES 
      NSL = NEL*NDF 
      DO 520 J = 1,NSL,NDF
      DO 520 K = J,NSL,NDF
      S(J+1,K+1) = S(J,K)
      S(K,J) = S(J,K)
520   S(K+1,J+1) = S(J,K) 
C.... FORMATS FOR INPUT-OUTPUT 
      RETURN 
1000  FORMAT(3F10.0,3I5) 
2000  FORMAT(/5X,8HPLANE ST,A4,23H LINEAR ELASTIC ELEMENT// 
     1 10X,7HMODULUS,E18.5/10X,13HPOISSON RATIO,F8.5/10X, 
     2 7HDENSITY,E18.5/10X,13HGAUSS PTS/DIR,I3/10X,10HSTRESS PTS,I6)
2001  FORMAT(A1,20A4//5X,16HELEMENT STRESSES//20H   ELEMENT  MATERIAL 
     1   ,6X,7H1-COORD,6X,7H2-COORD,4X,9H11-STRESS,4X,9H12-STRESS,4X, 
     2   9H22-STRESS,5X,8H1-STRESS,5X,8H2-STRESS,3X,5HANGLE/50X,
     3  9H11-STRAIN,4X,9H12-STRAIN,4X,9H22-STRAIN)
2002  FORMAT(2I10,2F13.4,5E13.4,F8.2/46X,3E13.4) 
      END 
C
      SUBROUTINE PGAUSS(L,LINT,R,Z,W)
C 
C.... GAUSS POINTS AND WEIGHTS FOR TWO DIMENSIONS 
C 
      DIMENSION LR(9),LZ(9),LW(9),R(1),Z(1),W(1) 
      DATA LR/-1,1,1,-1,0,1,0,-1,0/,LZ/-1,-1,1,1,-1,0,1,0,0/
      DATA LW/4*25,4*40,64/ 
      LINT = L*L
      GO TO (1,2,3),L
C.... 1X1 INTEGRATION 
1     R(1) = 0. 
      Z(1) = 0. 
      W(1) = 4.
      RETURN
C.... 2X2 INTEGRATION 
2     G = 1./SQRT(3.) 
      DO 21 I = 1,4 
      R(I) = G*LR(I)
      Z(I) = G*LZ(I) 
21    W(I) = 1. 
      RETURN 
C.... 3X3 INTEGRATION 
3     G = SQRT(0.6) 
      H = 1./81. 
      DO 31 I = 1,9
      R(I) = G*LR(I)
      Z(I) = G*LZ(I)
31    W(I) = H*LW(I) 
      RETURN 
      END 
C
      SUBROUTINE PSTRES(SIG,P1,P2,P3)
C 
C.... COMPUTE PRINCIPLE STRESSES (2 DIMENSIOONS)
C 
      DIMENSION SIG(3) 
C 
C.... STRESSES MUST BE STORED IN ARRAY SIG(3) IN THE ORDER 
C.... TAU-XX,TAU-XY,TAU-YY 
C 
      XI1 = (SIG(1) + SIG(3))/2. 
      XI2 = (SIG(1) - SIG(3))/2. 
      RHO = SQRT(XI2*XI2 + SIG(2)*SIG(2))
      P1 = XI1 + RHO
      P2 = XI1 - RHO
      P3 = 45.0
      IF(XI2.NE.0.0) P3 = 22.5*ATAN2(SIG(2),XI2)/ATAN(1.0)
      RETURN
      END
C
      SUBROUTINE SHAPE(SS,TT,X,SHP,XSJ,NDM,NEL,IX,FLG)
C
C.... SHAPE FUNCTION ROUTINE FOR TWO DIMENSIONS
C
      LOGICAL FLG
      COMMON/CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      DIMENSION SHP(3,9),X(NDM,1),S(4),T(4),XS(2,2),SX(2,2),IX(NUMEL)
      DATA S/-0.5,0.5,0.5,-0.5/,T/-0.5,-0.5,0.5,0.5/
C.... FORM 4-NODE QUADRILATERAL SHAPE FUNCTIONS
      DO 100 I = 1,4
      SHP(3,I) = (0.5+S(I)*SS)*(0.5+T(I)*TT)
      SHP(1,I) = S(I)*(0.5+T(I)*TT)
100   SHP(2,I) = T(I)*(0.5+S(I)*SS)
      IF(NEL.GE.4) GO TO 120 
C.... FORM TRIANGLE BY ADDING THIRD AND FOURTH TOGETHER 
      DO 110 I = 1,3 
110   SHP(I,3) = SHP(I,3)+SHP(I,4) 
C.... ADD QUADRATIC TERMS IF NECESSARY 
120   IF(NEL.GT.4) CALL SHAP2(SS,TT,SHP,IX,NEL) 
C.... CONSTRUCT JACOBIAN AND ITS INVERSE 
      DO 130 I = 1,NDM 
      DO 130 J = 1,2
      XS(I,J) = 0.0
      DO 130 K = 1,NEL
130   XS(I,J) = XS(I,J) + X(I,K)*SHP(J,K)
      XSJ = XS(1,1)*XS(2,2)-XS(1,2)*XS(2,1)
      IF(FLG) RETURN
      SX(1,1) = XS(2,2)/XSJ
      SX(2,2) = XS(1,1)/XSJ
      SX(1,2) =-XS(1,2)/XSJ
      SX(2,1) =-XS(2,1)/XSJ
C.... FORM GLOBAL DERIVATIVES 
      DO 140 I = 1,NEL
      TP        = SHP(1,I)*SX(1,1)+SHP(2,I)*SX(2,1)
      SHP(2,I)  = SHP(1,I)*SX(1,2)+SHP(2,I)*SX(2,2)
140   SHP(1,I) = TP
      RETURN
      END
C
      SUBROUTINE SHAP2(S,T,SHP,IX,NEL)
C
C.... ADD QUADRATIC FUNCTIONS AS NECESSARY
C
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      DIMENSION IX(NUMEL),SHP(3,9)
      S2 = (1.-S*S)/2.
      T2 = (1.-T*T)/2.
      DO 100 I = 5,9
      DO 100 J = 1,3
100   SHP(J,I) = 0.0
C.... MIDSIDE NODES (SERENDIPTY)
      IF(IX(5).EQ.0) GO TO 101
      SHP(1,5) = -S*(1.-T)
      SHP(2,5) = -S2
      SHP(3,5) = S2*(1.-T)
101   IF(NEL.LT.6) GO TO 107
      IF(IX(6).EQ.0) GO TO 102
      SHP(1,6) = T2
      SHP(2,6) = -T*(1.+S)
      SHP(3,6) = T2*(1.+S)
102   IF(NEL.LT.7) GO TO 107
      IF(IX(7).EQ.0) GO TO 103
      SHP(1,7) = -S*(1.+T)
      SHP(2,7) = S2
      SHP(3,7) = S2*(1.+T)
103   IF(NEL.LT.8) GO TO 107 
      IF(IX(8).EQ.0) GO TO 104 
      SHP(1,8) = -T2
      SHP(2,8) = -T*(1.-S)
      SHP(3,8) = T2*(1.-S)
C.... INTERIOR NODE (LAGRANGIAN) 
104   IF(NEL.LT.9) GO TO 107 
      IF(IX(9).EQ.0) GO TO 107 
      SHP(1,9) = -4.0*S*T2
      SHP(2,9) = -4.0*T*S2
      SHP(3,9) = 4.0*S2*T2
C.... CORRECT EDGE NODES FOR INTERIOR NODE (LAGRANGIAN) 
      DO 106 J = 1,3 
      DO 105 I = 1,4
105   SHP(J,I) = SHP(J,I) - 0.25*SHP(J,9) 
      DO 106 I = 5,8 
106   IF(IX(I).NE.0) SHP(J,I) = SHP(J,I) - .5*SHP(J,9) 
C.... CORRECT CORNER NODES FOR PRESENCE OF MIDSIDE NODES 
107   K = 8 
      DO 109 I = 1,4 
      L = I + 4
      DO 108 J = 1,3
108   SHP(J,I) = SHP(J,I) - 0.5*(SHP(J,K)+SHP(J,L)) 
109   K = L 
      RETURN 
      END
C
      SUBROUTINE ELMT02(D,UL,XL,IX,TL,S,P,NDF,NDM,NST,ISW)
C
C.... TWO DIMENSIONAL HEAT TRANSFER ELEMENT
C
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      COMMON/ELDATA/ DM,N,MA,MCT,IEL,NEL
      DIMENSION D(10),UL(1) ,XL(NDM,1),IX(NUMEL),TL(1),S(NST,1),P(1),
     1SHP(3,9),SG(4),TG(4) ,WLAB(2)
      DATA  SG/1.,1.,-1.,-1./,TG/-1.,1.,1.,-1/
      DATA WLAB/6H PLANE,6HAXISYM/
C.... TRANSFER TO CORRECT PROCESSOR 
      GO TO(1,2,3,2,5,3),ISW 
C.... INPUT MATERIAL PROPERTIES 
1     READ(5,1000) D(1),D(2),D(3),KAT
      WRITE(6,2000) D(1),D(2),D(3)    
      G=1./SQRT(3.)
      D(2)=D(2)*D(3)
      IF(KAT.NE.2) KAT=1
      WRITE(6,2001) WLAB(KAT)
      RETURN
C.... INSERT CHECK OF MESH IF DESIRED 
2     RETURN 
C.... COMPUTE CONDUCTIVITY (STIFFNESS) MATRIX 
3     DO 102 L=1,4 
      CALL SHAPE(SG(L)*G,TG(L)*G,XL,SHP,XSJ,NDM,NEL,IX,.FALSE.) 
      IF(KAT.NE.2) GO TO 101
      RR=0.
      DO 100 I=1,NEL
100   RR=RR+SHP(3,I)*XL(1,I) 
      XSJ=XSJ*RR 
101   DO 102 J=1,NEL 
      SHJ=SHP(3,J)*XSJ 
      A1=D(1)*SHP(1,J)*XSJ
      A2=D(1)*SHP(2,J)*XSJ
      DO 102 I=1,NEL
102   S(I,J)=S(I,J)+A1*SHP(1,I)+A2*SHP(2,I) 
      DO 106 I = 1,NEL 
      DO 106 J = 1,NEL
106   P(I) = P(I) - S(I,J)*UL(J) 
      RETURN 
C.... COMPUTE HEAT CAPACITY (MASS) MATRIX 
5     DO 105 L=1,4 
      CALL SHAPE(SG(L)*G,TG(L)*G,XL,SHP,XSJ,NDM,NEL,IX,.FALSE.)
      IF(KAT.NE.2) GO TO 104
      RR=0.
      DO 103 I=1,NEL
103   RR=RR+SHP(3,I)*XL(1,I) 
      XSJ=XSJ*RR 
104   DO 105 J=1,NEL 
      SHJ=D(2)*SHP(3,J)*XSJ 
      P(J) = P(J) + SHJ
      DO 105 I=1,NEL
105   S(I,J)=S(I,J)+SHJ*SHP(3,I) 
      RETURN 
C.... FORMATS 
1000  FORMAT(3F10.0,I5) 
2000  FORMAT(5X,30HLINEAR HEAT CONDUCTION ELEMENT   // 5X, 
     1  12HCONDUCTIVITY ,E12.5, 5X,15HSPECIFIC HEAT   ,E12.5, 5X,
     2  12H  DENSITY        ,E12.5  )
2001  FORMAT(10X,A6,9H ANALYSIS ) 
      END
C
      SUBROUTINE ELMT03(D,UL,XL,IX,TL,S,P,NDF,NDM,NST,ISW)
C
C.... TWO DIMENSIONAL FLUID ELEMENT FOR NAVIER-STOKES EQUATIONS
C
      COMMON /CDATA/ O,HEAD(20),NUMNP,NUMEL,NUMMAT,NEN,NEQ,IPR
      DIMENSION XL(NDM,1),UL(NDF,1),P(NDF,1),S(NST,1),D(10),V(2),DV(2,2)
     1,SHP(3,9),IX(NUMEL),SG(9),TG(9),WG(9)
C.... TRANSFER TO CORRECT PROCESSOR 
      GO TO(1,2,3,4,5,3),ISW 
C.... INPUT/OUTPUT FLUID PROPERTIES
1     READ(5,1000) D(1),D(2),D(3),L
      WRITE(6,2000) D(1),D(2),D(3),L    
      D(4) = L
      LINT = 0
      RETURN
2     RETURN
C.... COMPUTE UNSYMMETRIC TANGENT STIFFNESS OR OUT OF BALANCE FORCES
3     L = D(4)
      IF(L*L.NE.LINT) CALL PGAUSS(L,LINT,SG,TG,WG)
      DO 65 L = 1,LINT
      CALL SHAPE(SG(L),TG(L),XL,SHP,XSJ,NDM,NEL,IX,.FALSE.)
      XLAM = D(2)*XSJ*WG(L)
      XMU  = D(1)*XSJ*WG(L)
      XRHO = D(3)*XSJ*WG(L)
C.... COMPUTE VELOCITIES AND GRADIENTS
      DO 32 I = 1,2
      V(I) = 0.
      DO 31 K = 1,NEL
31    V(I) = V(I) + SHP(3,K)*UL(I,K)
      DO 32 J = 1,2
      DV(I,J) = 0.0
      DO 32 K = 1,NEL
32    DV(I,J) = DV(I,J) + SHP(J,K)*UL(I,K)
      IF(ISW.EQ.6) GO TO 60
C.... COMPUTE TANGENT, LOOP OVER COLUMNS OF S
      K1 = 1
      DO 34 K = 1,NEL
      A1 = XMU*SHP(1,K)
      A2 = XMU*SHP(2,K)
      A3 = XRHO*(DV(1,1)*SHP(3,K)+V(1)*SHP(1,K)+V(2)*SHP(2,K)) 
      A4 = XRHO*(DV(2,2)*SHP(3,K)+V(1)*SHP(1,K)+V(2)*SHP(2,K)) 
      A5 = XRHO*DV(1,2)*SHP(3,K)
      A6 = XRHO*DV(2,1)*SHP(3,K)
      B1 = XLAM*SHP(1,K)
      B2 = XLAM*SHP(2,K)
C.... LOOP OVER ROWS OF S
      J1 = 1
      DO 33 J = 1,NEL
      S(J1  ,K1  ) = S(J1  ,K1  ) + SHP(1,J)*(A1+A1+B1)+SHP(2,J)*A2
      S(J1  ,K1+1) = S(J1  ,K1+1) + SHP(1,J)*B2+SHP(2,J)*A1
      S(J1+1,K1  ) = S(J1+1,K1  ) + SHP(1,J)*A2+SHP(2,J)*B1
      S(J1+1,K1+1) = S(J1+1,K1+1) + SHP(1,J)*A1+SHP(2,J)*(A2+A2+B2)
33    J1 = J1 + NDF
34    K1 = K1 + NDF
      GO TO 65
C.... COMPUTE DIVERGENCE TERM
60    XDIV = (DV(1,1)+DV(2,2))*XLAM
C.... COMPUTE INTERNAL FORCES
      DO 64 K = 1,NEL
      DO 64 J = 1,2
      SUM = XDIV*SHP(J,K)
      DO 63 I = 1,2
63    SUM = SUM + XMU*(DV(J,I)+DV(I,J))*SHP(I,K) +
     1   XRHO*V(I)*DV(J,I)*SHP(3,K)
64    P(J,K) = P(J,K) - SUM
65    CONTINUE
      RETURN
C.... COMPUTE STRESSES AND VELOCITY GRADIENTS
4     RETURN
C.... COMPUTE MASS MATRIX
5     RETURN
C.... FORMATS
1000  FORMAT(3F10.0,I5)
2000  FORMAT(5X,29HTWO DIMENSIONAL FLUID ELEMENT//10X,12HVISCOSITY  =,
     1  E12.5/10X,12HCONSTRAINT =,E12.5/10X,12HDENSITY    =,E12.5/ 
     2   10X,12HGAUSS PT/DIR,I5/)
      END
 
